[INFO|training_funcs.py:108] 2025-10-27 01:16:51,481 >> Instantiated model ResNet50DANN. Summary:
ResNet50DANN(
  (resnet): ResNetModel(
    (embedder): ResNetEmbeddings(
      (embedder): ResNetConvLayer(
        (convolution): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
        (normalization): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (activation): ReLU()
      )
      (pooler): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    )
    (encoder): ResNetEncoder(
      (stages): ModuleList(
        (0): ResNetStage(
          (layers): Sequential(
            (0): ResNetBottleNeckLayer(
              (shortcut): ResNetShortCut(
                (convolution): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (normalization): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (layer): Sequential(
                (0): ResNetConvLayer(
                  (convolution): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (normalization): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (activation): ReLU()
                )
                (1): ResNetConvLayer(
                  (convolution): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (normalization): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (activation): ReLU()
                )
                (2): ResNetConvLayer(
                  (convolution): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (normalization): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (activation): Identity()
                )
              )
              (activation): ReLU()
            )
            (1): ResNetBottleNeckLayer(
              (shortcut): Identity()
              (layer): Sequential(
                (0): ResNetConvLayer(
                  (convolution): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (normalization): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (activation): ReLU()
                )
                (1): ResNetConvLayer(
                  (convolution): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (normalization): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (activation): ReLU()
                )
                (2): ResNetConvLayer(
                  (convolution): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (normalization): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (activation): Identity()
                )
              )
              (activation): ReLU()
            )
            (2): ResNetBottleNeckLayer(
              (shortcut): Identity()
              (layer): Sequential(
                (0): ResNetConvLayer(
                  (convolution): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (normalization): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (activation): ReLU()
                )
                (1): ResNetConvLayer(
                  (convolution): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (normalization): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (activation): ReLU()
                )
                (2): ResNetConvLayer(
                  (convolution): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (normalization): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (activation): Identity()
                )
              )
              (activation): ReLU()
            )
          )
        )
        (1): ResNetStage(
          (layers): Sequential(
            (0): ResNetBottleNeckLayer(
              (shortcut): ResNetShortCut(
                (convolution): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
                (normalization): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (layer): Sequential(
                (0): ResNetConvLayer(
                  (convolution): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (normalization): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (activation): ReLU()
                )
                (1): ResNetConvLayer(
                  (convolution): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
                  (normalization): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (activation): ReLU()
                )
                (2): ResNetConvLayer(
                  (convolution): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (normalization): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (activation): Identity()
                )
              )
              (activation): ReLU()
            )
            (1): ResNetBottleNeckLayer(
              (shortcut): Identity()
              (layer): Sequential(
                (0): ResNetConvLayer(
                  (convolution): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (normalization): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (activation): ReLU()
                )
                (1): ResNetConvLayer(
                  (convolution): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (normalization): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (activation): ReLU()
                )
                (2): ResNetConvLayer(
                  (convolution): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (normalization): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (activation): Identity()
                )
              )
              (activation): ReLU()
            )
            (2): ResNetBottleNeckLayer(
              (shortcut): Identity()
              (layer): Sequential(
                (0): ResNetConvLayer(
                  (convolution): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (normalization): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (activation): ReLU()
                )
                (1): ResNetConvLayer(
                  (convolution): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (normalization): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (activation): ReLU()
                )
                (2): ResNetConvLayer(
                  (convolution): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (normalization): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (activation): Identity()
                )
              )
              (activation): ReLU()
            )
            (3): ResNetBottleNeckLayer(
              (shortcut): Identity()
              (layer): Sequential(
                (0): ResNetConvLayer(
                  (convolution): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (normalization): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (activation): ReLU()
                )
                (1): ResNetConvLayer(
                  (convolution): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (normalization): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (activation): ReLU()
                )
                (2): ResNetConvLayer(
                  (convolution): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (normalization): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (activation): Identity()
                )
              )
              (activation): ReLU()
            )
          )
        )
        (2): ResNetStage(
          (layers): Sequential(
            (0): ResNetBottleNeckLayer(
              (shortcut): ResNetShortCut(
                (convolution): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
                (normalization): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (layer): Sequential(
                (0): ResNetConvLayer(
                  (convolution): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (normalization): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (activation): ReLU()
                )
                (1): ResNetConvLayer(
                  (convolution): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
                  (normalization): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (activation): ReLU()
                )
                (2): ResNetConvLayer(
                  (convolution): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (normalization): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (activation): Identity()
                )
              )
              (activation): ReLU()
            )
            (1): ResNetBottleNeckLayer(
              (shortcut): Identity()
              (layer): Sequential(
                (0): ResNetConvLayer(
                  (convolution): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (normalization): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (activation): ReLU()
                )
                (1): ResNetConvLayer(
                  (convolution): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (normalization): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (activation): ReLU()
                )
                (2): ResNetConvLayer(
                  (convolution): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (normalization): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (activation): Identity()
                )
              )
              (activation): ReLU()
            )
            (2): ResNetBottleNeckLayer(
              (shortcut): Identity()
              (layer): Sequential(
                (0): ResNetConvLayer(
                  (convolution): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (normalization): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (activation): ReLU()
                )
                (1): ResNetConvLayer(
                  (convolution): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (normalization): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (activation): ReLU()
                )
                (2): ResNetConvLayer(
                  (convolution): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (normalization): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (activation): Identity()
                )
              )
              (activation): ReLU()
            )
            (3): ResNetBottleNeckLayer(
              (shortcut): Identity()
              (layer): Sequential(
                (0): ResNetConvLayer(
                  (convolution): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (normalization): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (activation): ReLU()
                )
                (1): ResNetConvLayer(
                  (convolution): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (normalization): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (activation): ReLU()
                )
                (2): ResNetConvLayer(
                  (convolution): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (normalization): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (activation): Identity()
                )
              )
              (activation): ReLU()
            )
            (4): ResNetBottleNeckLayer(
              (shortcut): Identity()
              (layer): Sequential(
                (0): ResNetConvLayer(
                  (convolution): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (normalization): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (activation): ReLU()
                )
                (1): ResNetConvLayer(
                  (convolution): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (normalization): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (activation): ReLU()
                )
                (2): ResNetConvLayer(
                  (convolution): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (normalization): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (activation): Identity()
                )
              )
              (activation): ReLU()
            )
            (5): ResNetBottleNeckLayer(
              (shortcut): Identity()
              (layer): Sequential(
                (0): ResNetConvLayer(
                  (convolution): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (normalization): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (activation): ReLU()
                )
                (1): ResNetConvLayer(
                  (convolution): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (normalization): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (activation): ReLU()
                )
                (2): ResNetConvLayer(
                  (convolution): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (normalization): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (activation): Identity()
                )
              )
              (activation): ReLU()
            )
          )
        )
        (3): ResNetStage(
          (layers): Sequential(
            (0): ResNetBottleNeckLayer(
              (shortcut): ResNetShortCut(
                (convolution): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
                (normalization): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (layer): Sequential(
                (0): ResNetConvLayer(
                  (convolution): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (normalization): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (activation): ReLU()
                )
                (1): ResNetConvLayer(
                  (convolution): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
                  (normalization): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (activation): ReLU()
                )
                (2): ResNetConvLayer(
                  (convolution): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (normalization): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (activation): Identity()
                )
              )
              (activation): ReLU()
            )
            (1): ResNetBottleNeckLayer(
              (shortcut): Identity()
              (layer): Sequential(
                (0): ResNetConvLayer(
                  (convolution): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (normalization): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (activation): ReLU()
                )
                (1): ResNetConvLayer(
                  (convolution): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (normalization): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (activation): ReLU()
                )
                (2): ResNetConvLayer(
                  (convolution): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (normalization): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (activation): Identity()
                )
              )
              (activation): ReLU()
            )
            (2): ResNetBottleNeckLayer(
              (shortcut): Identity()
              (layer): Sequential(
                (0): ResNetConvLayer(
                  (convolution): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (normalization): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (activation): ReLU()
                )
                (1): ResNetConvLayer(
                  (convolution): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                  (normalization): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (activation): ReLU()
                )
                (2): ResNetConvLayer(
                  (convolution): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (normalization): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (activation): Identity()
                )
              )
              (activation): ReLU()
            )
          )
        )
      )
    )
    (pooler): AdaptiveAvgPool2d(output_size=(1, 1))
  )
  (pre_branch): Sequential(
    (0): Flatten(start_dim=1, end_dim=-1)
    (1): Linear(in_features=2048, out_features=512, bias=True)
    (2): ReLU()
    (3): Dropout(p=0.5, inplace=False)
  )
  (branch1): Linear(in_features=512, out_features=11, bias=True)
  (loss_fn): MaskedDomainAdversarialLoss(
    (branch1_loss_fn): InstanceWeightedCrossEntropyLoss(
      (base_loss): CrossEntropyLoss()
    )
    (branch2_loss_fn): BCEWithLogitsLoss()
  )
  (grad_reverse): GradientReversal()
  (branch2): Sequential(
    (0): GradientReversal()
    (1): Linear(in_features=512, out_features=1, bias=True)
  )
)
[INFO|training_funcs.py:113] 2025-10-27 01:16:53,113 >> Instantiated train dataset TwoLabelDataset, length 519
[INFO|training_funcs.py:116] 2025-10-27 01:16:54,759 >> Instantiated eval dataset TwoLabelDataset, length 519
[INFO|training_funcs.py:123] 2025-10-27 01:16:54,760 >> Got lambda scheduler parabolic_increasing_lambda_scheduler
[INFO|training_funcs.py:59] 2025-10-27 01:16:54,762 >> Will write results to /data/D21_train_results/parabolic_increasing_lambda_scheduler_fold_99_2025-10-27_01-16-54.csv_results.
[INFO|training_funcs.py:60] 2025-10-27 01:16:54,764 >> Will write model to /data/D21_train_results/parabolic_increasing_lambda_scheduler_fold_99_2025-10-27_01-16-54.csv_final_model.
[INFO|training_args.py:2222] 2025-10-27 01:16:54,766 >> PyTorch: setting up devices
[INFO|training_args.py:2222] 2025-10-27 01:16:54,766 >> PyTorch: setting up devices
[INFO|training_args.py:1881] 2025-10-27 01:16:56,975 >> The default value for the training argument `--report_to` will change in v5 (from all installed integrations to none). In v5, you will need to use `--report_to all` to get the same behavior as now. You should start updating your code and make this info disappear :-).
[INFO|training_args.py:1881] 2025-10-27 01:16:56,975 >> The default value for the training argument `--report_to` will change in v5 (from all installed integrations to none). In v5, you will need to use `--report_to all` to get the same behavior as now. You should start updating your code and make this info disappear :-).
[INFO|training_funcs.py:77] 2025-10-27 01:16:57,023 >> TrainingArguments(
_n_gpu=1,
accelerator_config={'split_batches': False, 'dispatch_batches': None, 'even_batches': True, 'use_seedable_sampler': True, 'non_blocking': False, 'gradient_accumulation_kwargs': None, 'use_configured_state': False},
adafactor=False,
adam_beta1=0.9,
adam_beta2=0.999,
adam_epsilon=1e-08,
auto_find_batch_size=False,
average_tokens_across_devices=True,
batch_eval_metrics=False,
bf16=False,
bf16_full_eval=False,
data_seed=None,
dataloader_drop_last=False,
dataloader_num_workers=0,
dataloader_persistent_workers=False,
dataloader_pin_memory=True,
dataloader_prefetch_factor=None,
ddp_backend=None,
ddp_broadcast_buffers=None,
ddp_bucket_cap_mb=None,
ddp_find_unused_parameters=None,
ddp_timeout=1800,
debug=[],
deepspeed=None,
disable_tqdm=False,
do_eval=True,
do_predict=False,
do_train=False,
eval_accumulation_steps=None,
eval_delay=0,
eval_do_concat_batches=True,
eval_on_start=False,
eval_steps=None,
eval_strategy=IntervalStrategy.EPOCH,
eval_use_gather_object=False,
fp16=False,
fp16_backend=auto,
fp16_full_eval=False,
fp16_opt_level=O1,
fsdp=[],
fsdp_config={'min_num_params': 0, 'xla': False, 'xla_fsdp_v2': False, 'xla_fsdp_grad_ckpt': False},
fsdp_min_num_params=0,
fsdp_transformer_layer_cls_to_wrap=None,
full_determinism=False,
gradient_accumulation_steps=1,
gradient_checkpointing=False,
gradient_checkpointing_kwargs=None,
greater_is_better=None,
group_by_length=False,
half_precision_backend=auto,
hub_always_push=False,
hub_model_id=None,
hub_private_repo=None,
hub_revision=None,
hub_strategy=HubStrategy.EVERY_SAVE,
hub_token=<HUB_TOKEN>,
ignore_data_skip=False,
include_for_metrics=[],
include_inputs_for_metrics=False,
include_num_input_tokens_seen=no,
include_tokens_per_second=False,
jit_mode_eval=False,
label_names=None,
label_smoothing_factor=0.0,
learning_rate=0.1,
length_column_name=length,
liger_kernel_config=None,
load_best_model_at_end=False,
local_rank=0,
log_level=passive,
log_level_replica=warning,
log_on_each_node=True,
logging_dir=/repo/results/logs/,
logging_first_step=False,
logging_nan_inf_filter=True,
logging_steps=500,
logging_strategy=IntervalStrategy.EPOCH,
lr_scheduler_kwargs={},
lr_scheduler_type=SchedulerType.LINEAR,
max_grad_norm=1.0,
max_steps=-1,
metric_for_best_model=None,
mp_parameters=,
neftune_noise_alpha=None,
no_cuda=False,
num_train_epochs=3,
optim=OptimizerNames.SGD,
optim_args=None,
optim_target_modules=None,
output_dir=/data/D21_train_results/parabolic_increasing_lambda_scheduler_fold_99_2025-10-27_01-16-54.csv_results,
overwrite_output_dir=False,
parallelism_config=None,
past_index=-1,
per_device_eval_batch_size=32,
per_device_train_batch_size=32,
prediction_loss_only=False,
project=huggingface,
push_to_hub=False,
push_to_hub_model_id=None,
push_to_hub_organization=None,
push_to_hub_token=<PUSH_TO_HUB_TOKEN>,
ray_scope=last,
remove_unused_columns=True,
report_to=[],
restore_callback_states_from_checkpoint=False,
resume_from_checkpoint=None,
run_name=None,
save_on_each_node=False,
save_only_model=False,
save_safetensors=True,
save_steps=500,
save_strategy=SaveStrategy.EPOCH,
save_total_limit=None,
seed=42,
skip_memory_metrics=True,
tf32=None,
torch_compile=False,
torch_compile_backend=None,
torch_compile_mode=None,
torch_empty_cache_steps=None,
torchdynamo=None,
tpu_metrics_debug=False,
tpu_num_cores=None,
trackio_space_id=trackio,
use_cpu=False,
use_legacy_prediction_loop=False,
use_liger_kernel=False,
use_mps_device=False,
warmup_ratio=0.0,
warmup_steps=0,
weight_decay=0.0001,
)
[DEBUG|trainer.py:2373] 2025-10-27 01:16:59,246 >> Currently training with a batch size of: 32
[DEBUG|trainer.py:2373] 2025-10-27 01:16:59,246 >> Currently training with a batch size of: 32
[INFO|trainer.py:2519] 2025-10-27 01:16:59,270 >> ***** Running training *****
[INFO|trainer.py:2519] 2025-10-27 01:16:59,270 >> ***** Running training *****
[INFO|trainer.py:2520] 2025-10-27 01:16:59,272 >>   Num examples = 519
[INFO|trainer.py:2520] 2025-10-27 01:16:59,272 >>   Num examples = 519
[INFO|trainer.py:2521] 2025-10-27 01:16:59,274 >>   Num Epochs = 3
[INFO|trainer.py:2521] 2025-10-27 01:16:59,274 >>   Num Epochs = 3
[INFO|trainer.py:2522] 2025-10-27 01:16:59,276 >>   Instantaneous batch size per device = 32
[INFO|trainer.py:2522] 2025-10-27 01:16:59,276 >>   Instantaneous batch size per device = 32
[INFO|trainer.py:2525] 2025-10-27 01:16:59,277 >>   Total train batch size (w. parallel, distributed & accumulation) = 32
[INFO|trainer.py:2525] 2025-10-27 01:16:59,277 >>   Total train batch size (w. parallel, distributed & accumulation) = 32
[INFO|trainer.py:2526] 2025-10-27 01:16:59,279 >>   Gradient Accumulation steps = 1
[INFO|trainer.py:2526] 2025-10-27 01:16:59,279 >>   Gradient Accumulation steps = 1
[INFO|trainer.py:2527] 2025-10-27 01:16:59,280 >>   Total optimization steps = 51
[INFO|trainer.py:2527] 2025-10-27 01:16:59,280 >>   Total optimization steps = 51
[INFO|trainer.py:2528] 2025-10-27 01:16:59,284 >>   Number of trainable parameters = 24,563,276
[INFO|trainer.py:2528] 2025-10-27 01:16:59,284 >>   Number of trainable parameters = 24,563,276
[WARNING|modeling_utils.py:1759] 2025-10-27 01:17:06,311 >> Could not estimate the number of tokens of the input, floating-point operations will not be computed
[WARNING|modeling_utils.py:1759] 2025-10-27 01:17:06,311 >> Could not estimate the number of tokens of the input, floating-point operations will not be computed
[INFO|trainer.py:4643] 2025-10-27 01:17:39,436 >> 
***** Running Evaluation *****
[INFO|trainer.py:4643] 2025-10-27 01:17:39,436 >> 
***** Running Evaluation *****
[INFO|trainer.py:4645] 2025-10-27 01:17:39,438 >>   Num examples = 519
[INFO|trainer.py:4645] 2025-10-27 01:17:39,438 >>   Num examples = 519
[INFO|trainer.py:4648] 2025-10-27 01:17:39,441 >>   Batch size = 32
[INFO|trainer.py:4648] 2025-10-27 01:17:39,441 >>   Batch size = 32
[INFO|trainer.py:4309] 2025-10-27 01:17:55,718 >> Saving model checkpoint to /data/D21_train_results/parabolic_increasing_lambda_scheduler_fold_99_2025-10-27_01-16-54.csv_results/checkpoint-17
[INFO|trainer.py:4309] 2025-10-27 01:17:55,718 >> Saving model checkpoint to /data/D21_train_results/parabolic_increasing_lambda_scheduler_fold_99_2025-10-27_01-16-54.csv_results/checkpoint-17
[INFO|configuration_utils.py:491] 2025-10-27 01:17:55,769 >> Configuration saved in /data/D21_train_results/parabolic_increasing_lambda_scheduler_fold_99_2025-10-27_01-16-54.csv_results/checkpoint-17/config.json
[INFO|configuration_utils.py:491] 2025-10-27 01:17:55,769 >> Configuration saved in /data/D21_train_results/parabolic_increasing_lambda_scheduler_fold_99_2025-10-27_01-16-54.csv_results/checkpoint-17/config.json
[INFO|modeling_utils.py:4181] 2025-10-27 01:17:57,009 >> Model weights saved in /data/D21_train_results/parabolic_increasing_lambda_scheduler_fold_99_2025-10-27_01-16-54.csv_results/checkpoint-17/model.safetensors
[INFO|modeling_utils.py:4181] 2025-10-27 01:17:57,009 >> Model weights saved in /data/D21_train_results/parabolic_increasing_lambda_scheduler_fold_99_2025-10-27_01-16-54.csv_results/checkpoint-17/model.safetensors
[INFO|trainer.py:4643] 2025-10-27 01:18:32,186 >> 
***** Running Evaluation *****
[INFO|trainer.py:4643] 2025-10-27 01:18:32,186 >> 
***** Running Evaluation *****
[INFO|trainer.py:4645] 2025-10-27 01:18:32,188 >>   Num examples = 519
[INFO|trainer.py:4645] 2025-10-27 01:18:32,188 >>   Num examples = 519
[INFO|trainer.py:4648] 2025-10-27 01:18:32,189 >>   Batch size = 32
[INFO|trainer.py:4648] 2025-10-27 01:18:32,189 >>   Batch size = 32
[INFO|trainer.py:4309] 2025-10-27 01:18:48,859 >> Saving model checkpoint to /data/D21_train_results/parabolic_increasing_lambda_scheduler_fold_99_2025-10-27_01-16-54.csv_results/checkpoint-34
[INFO|trainer.py:4309] 2025-10-27 01:18:48,859 >> Saving model checkpoint to /data/D21_train_results/parabolic_increasing_lambda_scheduler_fold_99_2025-10-27_01-16-54.csv_results/checkpoint-34
[INFO|configuration_utils.py:491] 2025-10-27 01:18:48,884 >> Configuration saved in /data/D21_train_results/parabolic_increasing_lambda_scheduler_fold_99_2025-10-27_01-16-54.csv_results/checkpoint-34/config.json
[INFO|configuration_utils.py:491] 2025-10-27 01:18:48,884 >> Configuration saved in /data/D21_train_results/parabolic_increasing_lambda_scheduler_fold_99_2025-10-27_01-16-54.csv_results/checkpoint-34/config.json
[INFO|modeling_utils.py:4181] 2025-10-27 01:18:50,968 >> Model weights saved in /data/D21_train_results/parabolic_increasing_lambda_scheduler_fold_99_2025-10-27_01-16-54.csv_results/checkpoint-34/model.safetensors
[INFO|modeling_utils.py:4181] 2025-10-27 01:18:50,968 >> Model weights saved in /data/D21_train_results/parabolic_increasing_lambda_scheduler_fold_99_2025-10-27_01-16-54.csv_results/checkpoint-34/model.safetensors
[INFO|trainer.py:4643] 2025-10-27 01:19:28,636 >> 
***** Running Evaluation *****
[INFO|trainer.py:4643] 2025-10-27 01:19:28,636 >> 
***** Running Evaluation *****
[INFO|trainer.py:4645] 2025-10-27 01:19:28,638 >>   Num examples = 519
[INFO|trainer.py:4645] 2025-10-27 01:19:28,638 >>   Num examples = 519
[INFO|trainer.py:4648] 2025-10-27 01:19:28,640 >>   Batch size = 32
[INFO|trainer.py:4648] 2025-10-27 01:19:28,640 >>   Batch size = 32
[INFO|trainer.py:4309] 2025-10-27 01:19:45,584 >> Saving model checkpoint to /data/D21_train_results/parabolic_increasing_lambda_scheduler_fold_99_2025-10-27_01-16-54.csv_results/checkpoint-51
[INFO|trainer.py:4309] 2025-10-27 01:19:45,584 >> Saving model checkpoint to /data/D21_train_results/parabolic_increasing_lambda_scheduler_fold_99_2025-10-27_01-16-54.csv_results/checkpoint-51
[INFO|configuration_utils.py:491] 2025-10-27 01:19:45,630 >> Configuration saved in /data/D21_train_results/parabolic_increasing_lambda_scheduler_fold_99_2025-10-27_01-16-54.csv_results/checkpoint-51/config.json
[INFO|configuration_utils.py:491] 2025-10-27 01:19:45,630 >> Configuration saved in /data/D21_train_results/parabolic_increasing_lambda_scheduler_fold_99_2025-10-27_01-16-54.csv_results/checkpoint-51/config.json
[INFO|modeling_utils.py:4181] 2025-10-27 01:19:47,958 >> Model weights saved in /data/D21_train_results/parabolic_increasing_lambda_scheduler_fold_99_2025-10-27_01-16-54.csv_results/checkpoint-51/model.safetensors
[INFO|modeling_utils.py:4181] 2025-10-27 01:19:47,958 >> Model weights saved in /data/D21_train_results/parabolic_increasing_lambda_scheduler_fold_99_2025-10-27_01-16-54.csv_results/checkpoint-51/model.safetensors
[INFO|trainer.py:2810] 2025-10-27 01:19:48,030 >> 

Training completed. Do not forget to share your model on huggingface.co/models =)


[INFO|trainer.py:2810] 2025-10-27 01:19:48,030 >> 

Training completed. Do not forget to share your model on huggingface.co/models =)


[INFO|trainer.py:4309] 2025-10-27 01:19:48,054 >> Saving model checkpoint to /data/D21_train_results/parabolic_increasing_lambda_scheduler_fold_99_2025-10-27_01-16-54.csv_final_model
[INFO|trainer.py:4309] 2025-10-27 01:19:48,054 >> Saving model checkpoint to /data/D21_train_results/parabolic_increasing_lambda_scheduler_fold_99_2025-10-27_01-16-54.csv_final_model
[INFO|configuration_utils.py:491] 2025-10-27 01:19:48,077 >> Configuration saved in /data/D21_train_results/parabolic_increasing_lambda_scheduler_fold_99_2025-10-27_01-16-54.csv_final_model/config.json
[INFO|configuration_utils.py:491] 2025-10-27 01:19:48,077 >> Configuration saved in /data/D21_train_results/parabolic_increasing_lambda_scheduler_fold_99_2025-10-27_01-16-54.csv_final_model/config.json
[INFO|modeling_utils.py:4181] 2025-10-27 01:19:50,202 >> Model weights saved in /data/D21_train_results/parabolic_increasing_lambda_scheduler_fold_99_2025-10-27_01-16-54.csv_final_model/model.safetensors
[INFO|modeling_utils.py:4181] 2025-10-27 01:19:50,202 >> Model weights saved in /data/D21_train_results/parabolic_increasing_lambda_scheduler_fold_99_2025-10-27_01-16-54.csv_final_model/model.safetensors
